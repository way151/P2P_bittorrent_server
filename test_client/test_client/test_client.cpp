/* TCPClient.cpp */

#include <stdlib.h>
#include <stdio.h>
#include <winsock2.h>
#include <string.h>
#define	BUFLEN		8000000                  // 缓冲区大小
#define WSVERS		MAKEWORD(2, 0)        // 指明版本2.0 
#define PATHLEN 50
#pragma comment(lib,"ws2_32.lib")         // 使用winsock 2.0 Llibrary

/*------------------------------------------------------------------------
 * main - TCP client for TIME service
 *------------------------------------------------------------------------
 */
char	buf_r[BUFLEN];   		    /* buffer for one line of text	*/
char	fname[PATHLEN + 1];
char	tmp[BUFLEN + 1];
char	buf_s[BUFLEN];

void main(int argc, char *argv[])
{
	char	*host = "127.0.0.1";	    /* server IP to connect         */
	char	*service = "50500";  	    /* server port to connect       */
	struct sockaddr_in sin;	            /* an Internet endpoint address	*/
	SOCKET	sock;		  	            /* socket descriptor	    	*/
	int	cc;			                    /* recv character count		    */
	int ss;
	WSADATA wsadata;
	WSAStartup(WSVERS, &wsadata);						  //加载winsock library。WSVERS为请求的版本，wsadata返回系统实际支持的最高版本

	sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);	  //创建套接字，参数：因特网协议簇(family)，流套接字，TCP协议
														  //返回：要监听套接字的描述符或INVALID_SOCKET
	memset(&sin, 0, sizeof(sin));						  // 从&sin开始的长度为sizeof(sin)的内存清0
	sin.sin_family = AF_INET;							  // 因特网地址簇
	sin.sin_addr.s_addr = inet_addr(host);                // 设置服务器IP地址(32位)
	sin.sin_port = htons((u_short)atoi(service));         // 设置服务器端口号  
	printf("Connecting...\n");
	int ret = connect(sock, (struct sockaddr *)&sin, sizeof(sin));  // 连接到服务器，第二个参数指向存放服务器地址的结构，第三个参数为该结构的大小，返回值为0时表示无错误发生，返回SOCKET_ERROR表示出错，应用程序可通过WSAGetLastError()获取相应错误代码。
	if (ret == SOCKET_ERROR) {
		printf("Error:%d.\n", GetLastError());
		getchar();
		exit(1);
	}
	printf("Successfully connected!\n\n");
	while (1) {
		printf("Input the file path: ");
		scanf("%s", fname);
		if (!strcmp(fname, "exit"))
			break;
		strcpy(buf_s, fname);
		strcat(buf_s, "\n");

		FILE *f;
		f = fopen(fname, "rb");
		if (f == NULL) {
			printf("Cannot open the file.\n\n");
			getchar();
			continue;
		}
		fseek(f, 0, SEEK_END); //read the file in one time
		int len = ftell(f);
		if (len > BUFLEN) {
			printf("out of size!\n");
			getchar();
			continue;
		}
		sprintf(tmp, "%d\n", len);
		strcat(buf_s, tmp);

		rewind(f);
		int leng = strlen(buf_s);
		fread(buf_s + leng, 1, len, f);
		fclose(f);
		printf("Transporting...\n");
		ss = send(sock, buf_s, BUFLEN, 0);
		if (ss == SOCKET_ERROR) {
			printf("Error:%d.\n", GetLastError());
		}
		else if (ss == 0) {                             // 对方正常关闭
			printf("Server closed!");
		}
		else {
			//for (int i = 0; i < 10000;i++);
			cc = recv(sock, buf_r, BUFLEN, 0);                // 第二个参数指向缓冲区，第三个参数为缓冲区大小(字节数)，第四个参数一般设置为0，返回值:(>0)接收到的字节数,(=0)对方已关闭,(<0)连接出错
			if (cc == SOCKET_ERROR)                          // 出错。其后必须关闭套接字sock
				printf("Error: %d.\n", GetLastError());
			else if (cc > 0) {
				//buf_r[cc] = '\0';	                       // ensure null-termination
				printf("%s\n", buf_r);                         // 显示所接收的字符串
			}
		}
	}

	closesocket(sock);                             // 关闭监听套接字
	WSACleanup();                                  // 卸载winsock library

	printf("\nPress any key to continue...");
	getchar();										// 等待任意按键
	getchar();
}